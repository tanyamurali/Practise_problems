class Solution {
private:
    void dfs(vector<vector<char>>&grid, int i, int j)
    {
        grid[i][j]='0';
        int r=grid.size();
        int c=grid[0].size();
        
        if(i-1>=0 && grid[i-1][j]=='1') dfs(grid,i-1,j);
        if(i+1<r && grid[i+1][j]=='1') dfs(grid,i+1,j);
        if(j-1>=0 && grid[i][j-1]=='1') dfs(grid,i,j-1);
        if(j+1<c && grid[i][j+1]=='1') dfs(grid,i,j+1);
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int ans=0;
        int n = grid.size();
        int m = grid[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
              //      cout<<"hi\n";
                    ans++;
                    dfs(grid,i,j);
                }
            }
        }
        return ans;
    }
};
