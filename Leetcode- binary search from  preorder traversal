/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstConstruct(vector<int>& preOrder, int s, int e) {
        if(s==e) {
            return new TreeNode(preOrder[s]);    
        }
        if(s<e) {
            TreeNode* root = new TreeNode(preOrder[s]);
            int e1 = s+1;
            while(preOrder[e1]<preOrder[s] && e1<e) {
                e1++;
            }
            if(preOrder[e1]>preOrder[s]) {
                e1=e1-1;
            }
            if(preOrder[s+1]<preOrder[s]) {
                root->left = bstConstruct(preOrder, s+1, e1 );
            } 
            if(e1<e) {
                root->right = bstConstruct(preOrder, e1+1, e);
            }
            
            return root;
        }
        return NULL;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        return bstConstruct(preorder, 0 , preorder.size()-1);
    }
};
