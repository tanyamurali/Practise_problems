Adding 2 numbers as linked list (Premium ques)

Description: 

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Solutions:
------------------

struct ListNode {

	int val;
	ListNode* next;
	
	Listnode(int x) : val(x), next(NULL){}
};

ListNode* add_List(ListNode *L1, ListNode* L2) {

	ListNode* N=NULL;
	ListNode* head1 = L1;
	ListNode* head2 = L2;
	
	int carry =0;
	while(head1 && head2) {
		int sum = head1->val + head2->val + carry;
		ListNode* nNode = new ListNode(sum%10);
		nNode->next=N;
		N=nNode;
		carry = sum/10;
		
		head1 = head1->next;
		head2 = head2->next;
	}
	
	while(head1) {
		int sum = head1->val + carry;
		ListNode* nNode = new ListNode(sum%10);
		nNode->next=N;
		N=nNode;
		carry = sum/10;
		
		head1 = head1->next;		
	}

	while(head2) {
		int sum = head2->val + carry;
		ListNode* nNode = new ListNode(sum%10);
		nNode->next=N;
		N=nNode;
		carry = sum/10;
		
		head2 = head2->next;		
	}
	
	if(carry) {
		ListNode* nNode = new ListNode(carry);
		nNode->next=N;
		N=nNode;
	}
	
	// reverse 
	
	ListNode* prev=NULL;
	ListNode* curr=N;
	ListNode* next_curr = N->next;
	
	while(curr) {
		curr->next=prev;
		prev = curr;
		curr = next_curr;
		next_curr = curr->next;
		
	}
	N=prev;
	
	return N;
}

