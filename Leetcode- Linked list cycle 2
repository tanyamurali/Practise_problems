/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        /*
        unordered_map<ListNode*, bool> mp;
        
        while(head) {
            if(mp.count(head)) return head;
            mp[head]=true;
            head=head->next;
        }
        return NULL;
        
        */
        /* 2 pointer */ 
        
        ListNode *slow=head, *fast=head;
        
        while(fast && fast->next) {
            fast=fast->next->next;
            slow=slow->next;
            if(fast==slow) {
                // cycle detected 
                break;
            }
        }
        if(fast && fast->next) {
            slow=head;
            
            while(slow!=fast){
                slow=slow->next;
                fast=fast->next;
            }
            
            return slow;
        }
        return NULL;
    }
};
